#pragma once
#define SINGLETON(type)								\
													\
public:												\
	static type* getInstance()						\
	{												\
		static type _instance;						\
		return &_instance;							\
	}												\
private:											\
	type();											\
	~type();										


// 싱글톤 클래스 정의
template <typename T>
class SingleTon
{
protected:
	//싱글톤 인스턴스 선언하기
	static T* _instance;

	SingleTon() {};
	~SingleTon() {};

public:
	static T* getInst()
	{
		//싱글톤 객체가 없으면 새로 만들어 전달.
		if (nullptr == _instance)
			_instance = new T;

		return _instance;
	}
	void release()
	{
		//싱글톤 있으면 해제
		if (nullptr != _instance)
		{
			delete _instance;
			_instance = nullptr;
		}
	}

};

//싱글톤 인스턴스 선언
template <typename T>
T* SingleTon<T>::_instance = nullptr;
